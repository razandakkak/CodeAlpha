#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Task {
private:
    string description;
    bool isCompleted;

public:
    // Constructor with a default value for isCompleted
    Task(string desc, bool completed = false) : description(desc), isCompleted(completed) {}

    void markCompleted() {
        isCompleted = true;
    }

    bool getStatus() const {
        return isCompleted;
    }

    string getDescription() const {
        return description;
    }

    // Mark displayDetails as a const function
    void displayDetails() const {
        cout << description;
        if (isCompleted) {
            cout << " [Completed]";
        }
        cout << endl;
    }
};

class ToDoList {
private:
    vector<Task> tasks;

public:
    void addTask(const string& description) {
        tasks.emplace_back(description); // Corrected to call constructor properly
    }

    void markTaskCompleted(int index) {
        if (index >= 0 && index < tasks.size()) {
            tasks[index].markCompleted();
        } else {
            cout << "Invalid task number!" << endl;
        }
    }

    void displayTasks() const {
        if (tasks.empty()) {
            cout << "No tasks in the list!" << endl;
            return;
        }

        for (int i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". ";
            tasks[i].displayDetails();
        }
    }
};

void displayMenu() {
    cout << "\n--- To-Do List Application ---\n";
    cout << "1. Add Task\n";
    cout << "2. Mark Task as Completed\n";
    cout << "3. View Tasks\n";
    cout << "4. Exit\n";
    cout << "Choose an option: ";
}

int main() {
    ToDoList myList;
    int choice;

    do {
        displayMenu();
        cin >> choice;
        cin.ignore(); // Clear the input buffer

        switch (choice) {
            case 1: {
                string description;
                cout << "Enter task description: ";
                getline(cin, description);
                myList.addTask(description);
                break;
            }
            case 2: {
                int taskNumber;
                myList.displayTasks();
                cout << "Enter task number to mark as completed: ";
                cin >> taskNumber;
                myList.markTaskCompleted(taskNumber - 1);
                break;
            }
            case 3: {
                myList.displayTasks();
                break;
            }
            case 4:
                cout << "Exiting application...\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
                break;
        }
    } while (choice != 4);

    return 0;
}
